View different versions of a single file without maintaining manual copies.

CVS SVN Mercurial Git - VCS.

Commits - Checkpoints created by user.

Git diff operates on commit.

relationships in concept map: * type of .
* part of.
* operates on.

one commit per logical change.

tracking across multiple files.

Commit is a snapshot of all the files in the repo.

Cloning will download the files along with history of the files.

Command for colored output in terminal: git config --global color.ui auto

config command used to configure the git setting. check it out on terminal.


using git checkout commit_id  we can go back to previous versions of our file.
git uses octopus for maintaining version.
HEAD is used to point at the commit currently used.

Version control provides confidence to explore and change code base.

git_profile and git_prompt downloaded to make changes in terminal make it easier to work with git. Basically creating a git workspace.

file compare in windows using fc.
*nix using diff

Behavior of git clone

If someone else gives you the location of their directory or repository, you can copy or clone it to your own computer.

This is true for both copying a directory and cloning a repository.

As you saw in the previous lesson, if you have a URL to a repository, you can copy it to your computer using git clone.

For copying a directory, you weren't expected to know this, but it is possible to copy a directory from one computer to another using the command scp, which stands for "secure copy". The name was chosen because the scp command lets you securely copy a directory from one computer to another.


The history of changes to the directory or repository is copied.

This is true for cloning a repository, but not for copying a directory. The main reason to use git clone rather than copying the directory is because git clone will also copy the commit history of the repository. However, copying can be done on any directory, whereas git clone only works on a Git repository.

Checking out an earlier commit will change atleast state of one file. Sometime true.

If no file is changed then commit is not possible. However, change to file in one commit and revert in another commit will cause the checkout of earlier commit no change any file.

Behavior of git checkout

Checking out an earlier commit will change the state of at least one file.

This is sometimes true. Git doesn't allow you to save a new commit if no files have been updated, so you might think this is always true. However, it's possible to do the following:

Save a commit (call this commit 1).
Update some files and save another commit (call this commit 2).
Change all the files back to their state during commit 1, then save again (call this commit 3).
This sometimes happens if commit 2 contained a bug, and it's important to fix the bug quickly. The easiest thing to do might be to remove all the changes introduced by commit 2 to fix the bug, then figure out how to safely reintroduce the changes later.

At this point, commit 3 is the latest commit, so if you checkout commit 1, none of the files will be changed.


Checking out an earlier commit will change the state of more than one file.

Checking out an earlier commit will change the state of every file in the repository.

Both of these are sometimes true. Since each commit tracks the state of all files in the repository, it is possible that checking out an earlier commit will change the state of multiple files, or even all the files in the repository. However, it is possible to save a new commit after changing only one file, so it is possible only one file will change.


After checking out a commit, the state of all the files in the repository will be from the same point in time.

This is always true. A commit saves a snapshot of all files in the repository at the time the commit was made, so checking out an earlier commit will result in all the files being reverted to their state at the time the commit was made. That is, the files will be in a consistent state.

git diff old new

When you initialize the repository, Git doesn’t create any commits for you. You’ll have to create the first commit yourself.


git init to initialize git repo.


No need to commit each and every file separately. Just add each file to staging area to be tracked.

git add file_name to add files to staging area.


git commit styling guide.
Write your commit messages as it were a command.

To delete git from dir: delete .git dir

git diff
with no args when used denotes difference between the staging area and working directory. staging area - working dir.

git diff --staged
repo - staging area

git reset --hard
clear everything in staging area and the working area.

Branches: avoid linear fashion of commits.
to add new features.
Tip of a branch  - Last commit on a branch.

Process of combing two commits - Merging.

git branch  - To create and view branches.

git branch  name - new branch  - name
* near a branch indicated the current branch which the commit will affect.
git checkout branchname selects that branch

git log --graph --oneline master branchname

each commit identifies its parent in the graph.
So its easier to construct. Branch information is stored only by branch names.

git checkout -b branch-name = two commands
git branch branch-name
git checkout branch-name

using tip of branch1 and branch2 and the point where they diverged git can create a merge between.

merged node contains information about both the parents two tips of the branches.
called merging coin branch into the master branch.

after merge we can delete the branch but commits will be there \.

git merge master coins  coins to master.

after merging git diff cannot be very effective as two commits can have different parents

To avoid this we need to its parent. but thats not possible with git log
So git show commit_id is used

git branch -d branchname
deletes only the branch not the commits as they will be accessible after merge.

git merge conflicts occur when two branches have altered the lines of code.
in that case special symbols will added to indicate common ancestor code.

after resolving conflict, both modified git add, git status , git commit.
